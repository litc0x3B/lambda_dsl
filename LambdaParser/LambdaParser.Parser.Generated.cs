// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 2/19/2024 7:51:58 PM
// Input file <LambdaParser/LambdaParser.Language.grammar.y - 2/19/2024 6:26:59 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using LambdaSyntaxTree;

namespace lambda_dsl.LambdaParser
{
internal enum Token {error=2,EOF=3,LAMBDA=4,ID=5,P_OPEN=6,
    P_CLOSE=7,DOT=8};

internal partial struct ValueType
{ 
              public char Id;
              public NodeExpr Expr;
	}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class LambdaParserParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[8];
  private static State[] states = new State[16];
  private static string[] nonTerms = new string[] {
      "TermList", "$accept", "Term", "Expression", };

  static LambdaParserParser() {
    states[0] = new State(new int[]{5,8,6,15},new int[]{-1,1,-4,14});
    states[1] = new State(new int[]{3,2,6,4,5,8},new int[]{-3,3,-4,7});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{4,9,5,8,6,15},new int[]{-1,5,-4,14});
    states[5] = new State(new int[]{7,6,6,4,5,8},new int[]{-3,3,-4,7});
    states[6] = new State(-4);
    states[7] = new State(-5);
    states[8] = new State(-6);
    states[9] = new State(new int[]{5,10});
    states[10] = new State(new int[]{8,11});
    states[11] = new State(new int[]{5,8,6,15},new int[]{-1,12,-4,14});
    states[12] = new State(new int[]{7,13,6,4,5,8},new int[]{-3,3,-4,7});
    states[13] = new State(-7);
    states[14] = new State(-3);
    states[15] = new State(new int[]{4,9});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-1,-3});
    rules[3] = new Rule(-1, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{6,-1,7});
    rules[5] = new Rule(-3, new int[]{-4});
    rules[6] = new Rule(-4, new int[]{5});
    rules[7] = new Rule(-4, new int[]{6,4,5,8,-1,7});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // TermList -> TermList, Term
{CurrentSemanticValue.Expr = new NodeAppl(ValueStack[ValueStack.Depth-2].Expr, ValueStack[ValueStack.Depth-1].Expr); _treeRoot = CurrentSemanticValue.Expr;}
        break;
      case 3: // TermList -> Expression
{CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr; _treeRoot = CurrentSemanticValue.Expr;}
        break;
      case 4: // Term -> P_OPEN, TermList, P_CLOSE
{CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-2].Expr;}
        break;
      case 5: // Term -> Expression
{CurrentSemanticValue.Expr = ValueStack[ValueStack.Depth-1].Expr;}
        break;
      case 6: // Expression -> ID
{CurrentSemanticValue.Expr = new NodeId(ValueStack[ValueStack.Depth-1].Id);}
        break;
      case 7: // Expression -> P_OPEN, LAMBDA, ID, DOT, TermList, P_CLOSE
{CurrentSemanticValue.Expr = new NodeAbstr(new NodeId(ValueStack[ValueStack.Depth-4].Id), ValueStack[ValueStack.Depth-2].Expr);}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


private NodeExpr _treeRoot;
}
}
